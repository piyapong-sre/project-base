// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contacts  Contact[]
  roles     UserRole[]
  Post      Post[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique // เช่น 'admin', 'editor', 'viewer'
  users       UserRole[] // ความสัมพันธ์ Many-to-Many กับ User ผ่าน UserRole
  permissions RolePermission[] // ความสัมพันธ์ Many-to-Many กับ Permission ผ่าน RolePermission
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id        String           @id @default(uuid())
  name      String           @unique // เช่น 'create-post', 'edit-post'
  roles     RolePermission[] // ความสัมพันธ์ Many-to-Many กับ Role ผ่าน RolePermission
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId]) // เพื่อป้องกันไม่ให้ผู้ใช้มีบทบาทซ้ำกัน
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId]) // เพื่อป้องกันไม่ให้บทบาทมีสิทธิ์ซ้ำกัน
}

model Contact {
  id    String  @id @default(uuid())
  email String?
  phone String?

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
